name: Branch Deletion Workflow

on:
  #push:
  workflow_dispatch:
  #schedule:
  #  - cron: '*/5 * * * *'

jobs:
  cleanup-old-branches:
    runs-on: ubuntu-latest

    permissions:
      contents: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # fetch all history
    
    - name: Fetch all remote branches
      run: |
        git fetch --all
        #git checkout -B main origin/main
    
    - name: List all branches in repo
      run: |
        git branch -r
        
    - name: List merged branches
      run: |
        echo "Remote branches merged with main:"
        git branch -r --merged main
        
    - name: List not merged branches
      run: |
        echo "Remote branches NOT merged with main:"
        git branch -r --no-merged main

    - name: Identify merged branches
      run: |
        for branch in $(git for-each-ref --format='%(refname:short)' refs/remotes/origin/); do
          # Skip symbolic reference
          if [[ "$branch" == "origin/main" || "$branch" == "origin" ]]; then
            continue
          fi
          if git branch -r --merged origin/main | grep -q "$branch"; then
            echo "ðŸŸ¢ $branch is merged into origin/main"
          elif git branch -r --no-merged origin/main | grep -q "$branch"; then
            echo "ðŸ”´ $branch is NOT merged into origin/main"
          fi
        done
        
    - name: Delete old merged branches
      run: |
        for branch in $(git for-each-ref --format='%(refname:short)' refs/remotes/origin/); do
          if [[ "$branch" == "origin/main" || "$branch" == "origin" ]]; then
            continue
          fi
          if git branch -r --merged origin/main | grep -q "$branch"; then
            echo "ðŸŸ¢ $branch is merged into origin/main"
            
            #echo "Last commit date for $branch:"
            #git log -1 --format=%cd "$branch" --date=short
            
            time_commit=$(git log -1 --pretty=format:"%at" "$branch")
            #echo "Timestamp of last commit: $time_commit"
            
            time_current=$(date +%s)
            #echo "Timestamp of current time: $time_current"
            
            time_diff=$((time_current - time_commit))
            echo "Commit age: $time_diff (in sec), $(($time_diff / 86400)) (in days)"

            #cutoff=$((604800)) # 1 week
            cutoff=$((2492000)) # 1 month
            
            # if last commit is older than cutoff: delete branch
            if (($time_diff > cutoff)); then
            	branch_to_delete="${branch#origin/}"
              git push origin --delete "$branch_to_delete"
              echo "Branch $branch has been deleted successfully!"
            else
              echo "Branch $branch is too young to be deleted."
            fi
          fi
        done
